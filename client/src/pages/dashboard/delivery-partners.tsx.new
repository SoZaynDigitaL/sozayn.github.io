import DashboardLayout from '@/components/layout/DashboardLayout';
import { DashboardCard } from '@/components/ui/dashboard-card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table';
import { 
  Truck, 
  Search, 
  PlusCircle, 
  CheckCircle2, 
  XCircle,
  Link as LinkIcon,
  MapPin,
  Clock,
  Settings
} from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { Badge } from '@/components/ui/badge';
import { 
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import { useState } from 'react';
import { StatsCard } from '@/components/ui/stats';

// Example data representing delivery partners
const DELIVERY_PARTNERS = [
  { 
    id: 1, 
    name: 'DoorDash', 
    status: 'active', 
    orders: 156,
    avgDeliveryTime: '32 min',
    deliveryRadius: '5 miles',
    fee: '$6.99'
  },
  { 
    id: 2, 
    name: 'UberEats', 
    status: 'active', 
    orders: 98,
    avgDeliveryTime: '29 min',
    deliveryRadius: '7 miles',
    fee: '$5.49'
  },
  { 
    id: 3, 
    name: 'GrubHub', 
    status: 'inactive', 
    orders: 42,
    avgDeliveryTime: '35 min',
    deliveryRadius: '4 miles',
    fee: '$7.50'
  },
  { 
    id: 4, 
    name: 'Postmates', 
    status: 'active', 
    orders: 87,
    avgDeliveryTime: '31 min',
    deliveryRadius: '6 miles',
    fee: '$6.25'
  }
];

export default function DeliveryPartners() {
  const [searchTerm, setSearchTerm] = useState('');
  
  // Query to fetch delivery partners
  const { data: deliveryPartners = DELIVERY_PARTNERS, isLoading } = useQuery({
    queryKey: ['/api/delivery-partners'],
    enabled: false // Disabled actual API call since we're using example data
  });
  
  // Filter partners based on search term
  const filteredPartners = deliveryPartners.filter((partner: any) => 
    partner.name.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  // Calculate statistics
  const activePartners = deliveryPartners.filter((p: any) => p.status === 'active').length;
  const totalOrders = deliveryPartners.reduce((sum: number, p: any) => sum + p.orders, 0);
  const avgDeliveryTime = Math.round(
    deliveryPartners.reduce((sum: number, p: any) => {
      const minutes = parseInt(p.avgDeliveryTime.split(' ')[0]);
      return sum + minutes;
    }, 0) / deliveryPartners.length
  );
  
  return (
    <DashboardLayout>
      <div className="space-y-6">
        <div className="flex flex-col md:flex-row gap-4 md:items-center md:justify-between">
          <h1 className="text-2xl font-bold">Delivery Partners</h1>
          
          <div className="flex flex-col sm:flex-row gap-2">
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-text-secondary" />
              <Input
                type="search"
                placeholder="Search delivery partners..."
                className="w-full pl-9 bg-bg-card border-border-color sm:w-[300px]"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            
            <Button className="gap-2">
              <PlusCircle className="h-4 w-4" />
              Add Partner
            </Button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <StatsCard
            title="Active Partners"
            value={activePartners.toString()}
            icon={<CheckCircle2 className="h-4 w-4 text-accent-green" />}
            change={12.5}
            progress={75}
            progressColor="bg-accent-green"
          />
          
          <StatsCard
            title="Total Orders"
            value={totalOrders.toString()}
            icon={<Truck className="h-4 w-4 text-accent-blue" />}
            change={8.2}
            progress={65}
            progressColor="bg-accent-blue"
          />
          
          <StatsCard
            title="Avg. Delivery Time"
            value={`${avgDeliveryTime} min`}
            icon={<Clock className="h-4 w-4 text-accent-purple" />}
            change={-3.7}
            progress={50}
            progressColor="bg-accent-purple"
          />
        </div>
        
        <DashboardCard title="Delivery Partners">
          <div className="overflow-hidden rounded-lg border border-border-color">
            <Table>
              <TableHeader>
                <TableRow className="bg-bg-chart">
                  <TableHead>Partner</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Orders</TableHead>
                  <TableHead>Avg. Delivery Time</TableHead>
                  <TableHead>Delivery Radius</TableHead>
                  <TableHead>Standard Fee</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredPartners.length > 0 ? (
                  filteredPartners.map((partner: any) => (
                    <TableRow key={partner.id} className="bg-bg-card border-t border-border-color">
                      <TableCell className="font-medium">{partner.name}</TableCell>
                      <TableCell>
                        <Badge 
                          variant="outline" 
                          className={
                            partner.status === 'active' 
                              ? 'bg-accent-green/10 text-accent-green border-accent-green/20' 
                              : 'bg-destructive/10 text-destructive border-destructive/20'
                          }
                        >
                          {partner.status === 'active' ? (
                            <CheckCircle2 className="h-3 w-3 mr-1" />
                          ) : (
                            <XCircle className="h-3 w-3 mr-1" />
                          )}
                          {partner.status === 'active' ? 'Active' : 'Inactive'}
                        </Badge>
                      </TableCell>
                      <TableCell>{partner.orders}</TableCell>
                      <TableCell>{partner.avgDeliveryTime}</TableCell>
                      <TableCell>{partner.deliveryRadius}</TableCell>
                      <TableCell>{partner.fee}</TableCell>
                      <TableCell className="text-right">
                        <Button variant="ghost" size="sm">
                          <Settings className="h-4 w-4" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={7} className="text-center py-6 text-text-secondary">
                      No delivery partners found matching your search.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </DashboardCard>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <DashboardCard title="Partner Integrations">
            <div className="grid gap-4">
              {['DoorDash Drive', 'UberDirect', 'Grubhub Marketplace', 'Postmates On-Demand'].map((integration, index) => (
                <Card key={index} className="bg-bg-card border-border-color">
                  <CardHeader className="pb-3">
                    <div className="flex justify-between items-center">
                      <CardTitle className="text-md">{integration}</CardTitle>
                      <Badge className={index % 2 === 0 ? 'bg-accent-green' : 'bg-accent-blue'}>
                        {index % 2 === 0 ? 'Connected' : 'Available'}
                      </Badge>
                    </div>
                    <CardDescription>
                      {index % 2 === 0 
                        ? 'Integration is active and working properly.' 
                        : 'Click to set up this integration for your store.'}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="flex justify-end">
                    <Button variant="outline" size="sm" className="gap-2">
                      {index % 2 === 0 ? (
                        <>
                          <Settings className="h-4 w-4" />
                          Configure
                        </>
                      ) : (
                        <>
                          <LinkIcon className="h-4 w-4" />
                          Connect
                        </>
                      )}
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </DashboardCard>
          
          <DashboardCard title="Delivery Settings">
            <div className="space-y-6">
              <div className="space-y-2">
                <h3 className="text-sm font-medium">Delivery Zones</h3>
                <Card className="bg-bg-card border-border-color p-4 flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <MapPin className="h-5 w-5 text-accent-purple" />
                    <div>
                      <p className="font-medium">Primary Zone</p>
                      <p className="text-sm text-text-secondary">5 mile radius from store</p>
                    </div>
                  </div>
                  <Button variant="outline" size="sm">Edit</Button>
                </Card>
              </div>
              
              <div className="space-y-2">
                <h3 className="text-sm font-medium">Delivery Hours</h3>
                <Card className="bg-bg-card border-border-color p-4 flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Clock className="h-5 w-5 text-accent-blue" />
                    <div>
                      <p className="font-medium">Standard Hours</p>
                      <p className="text-sm text-text-secondary">Mon-Sun: 10:00 AM - 9:00 PM</p>
                    </div>
                  </div>
                  <Button variant="outline" size="sm">Edit</Button>
                </Card>
              </div>
              
              <Button className="w-full">Save All Settings</Button>
            </div>
          </DashboardCard>
        </div>
      </div>
    </DashboardLayout>
  );
}