import { useState } from 'react';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { DashboardCard } from '@/components/ui/dashboard-card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { StatsCard } from '@/components/ui/stats';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { 
  Share2, 
  Instagram, 
  Facebook, 
  Twitter, 
  Users, 
  MessageSquare, 
  MousePointer, 
  Calendar,
  Link as LinkIcon,
  ExternalLink,
  Plus,
  Image,
  BarChart
} from 'lucide-react';
import { 
  Form, 
  FormControl, 
  FormDescription, 
  FormField, 
  FormItem, 
  FormLabel, 
  FormMessage 
} from '@/components/ui/form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { useToast } from '@/hooks/use-toast';
import { 
  BarChart as ReBarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer, 
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line
} from 'recharts';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';

const socialPostSchema = z.object({
  platform: z.enum(['instagram', 'facebook', 'twitter']),
  message: z.string().min(10, {
    message: "Message must be at least 10 characters.",
  }),
  imageUrl: z.string().optional(),
  scheduledAt: z.string().optional(),
});

type SocialPostFormValues = z.infer<typeof socialPostSchema>;

// Define interfaces for social data
interface SocialAccount {
  id: number;
  userId: number;
  platform: string;
  handle: string;
  connected: boolean;
  followers: number;
  engagement: number;
}

interface SocialPost {
  id: number;
  userId: number;
  platform: string;
  content: string;
  posted: string | null;
  scheduledAt?: string;
  scheduled?: boolean;
  likes: number;
  comments: number;
  image: string;
}

interface SocialStats {
  followers: number;
  engagement: number;
  posts: number;
  clicks: number;
  platformBreakdown: { platform: string; percentage: number }[];
  weeklyData: { name: string; instagram: number; facebook: number }[];
}

export default function SocialMediaPage() {
  const [activeTab, setActiveTab] = useState('accounts');
  const { toast } = useToast();
  
  // Fetch social accounts from API
  const { data: accounts = [], isLoading: accountsLoading } = useQuery<SocialAccount[]>({
    queryKey: ['/api/social/accounts'],
  });
  
  // Fetch social stats from API
  const { data: stats, isLoading: statsLoading } = useQuery<SocialStats>({
    queryKey: ['/api/social/stats'],
  });
  
  // Fetch social posts from API
  const { data: posts = [], isLoading: postsLoading } = useQuery<SocialPost[]>({
    queryKey: ['/api/social/posts'],
  });
  
  // Social media form
  const socialForm = useForm<SocialPostFormValues>({
    resolver: zodResolver(socialPostSchema),
    defaultValues: {
      platform: 'instagram',
      message: '',
      imageUrl: '',
      scheduledAt: '',
    }
  });
  
  // Post mutation
  const postMutation = useMutation({
    mutationFn: async (data: SocialPostFormValues) => {
      const response = await apiRequest('POST', '/api/social/posts', {
        platform: data.platform,
        message: data.message,
        imageUrl: data.imageUrl,
        scheduledAt: data.scheduledAt
      });
      return await response.json();
    },
    onSuccess: () => {
      // Invalidate the posts query to refetch
      queryClient.invalidateQueries({ queryKey: ['/api/social/posts'] });
      toast({
        title: "Post created successfully",
        description: `Your ${socialForm.getValues().platform} post has been ${socialForm.getValues().scheduledAt ? 'scheduled' : 'published'}.`,
      });
      socialForm.reset();
    },
    onError: (error: any) => {
      toast({
        title: "Error creating post",
        description: error.message || "There was an error creating your post. Please try again.",
        variant: "destructive"
      });
    }
  });
  
  // Connect account mutation
  const connectMutation = useMutation({
    mutationFn: async ({ platform, handle }: { platform: string, handle: string }) => {
      const response = await apiRequest('POST', '/api/social/connect', {
        platform,
        handle
      });
      return await response.json();
    },
    onSuccess: () => {
      // Invalidate accounts query to refetch
      queryClient.invalidateQueries({ queryKey: ['/api/social/accounts'] });
      toast({
        title: "Account connected",
        description: "Your social media account has been connected successfully."
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error connecting account",
        description: error.message || "There was an error connecting your account. Please try again.",
        variant: "destructive"
      });
    }
  });
  
  // Social stats with fallback to empty values if still loading
  const socialStats = stats || {
    followers: 0,
    engagement: 0,
    posts: 0,
    clicks: 0,
    platformBreakdown: [],
    weeklyData: []
  };
  
  // Social media performance data
  const socialPerformanceData = stats?.platformBreakdown || [
    { platform: 'Instagram', percentage: 45 },
    { platform: 'Facebook', percentage: 30 },
    { platform: 'Twitter', percentage: 25 },
  ].map(item => ({ name: item.platform, value: item.percentage }));
  
  const COLORS = ['#4361ee', '#3b5998', '#00acee'];
  
  // Engagement data
  const engagementData = stats?.weeklyData || [
    { name: 'Mon', instagram: 42, facebook: 28 },
    { name: 'Tue', instagram: 38, facebook: 25 },
    { name: 'Wed', instagram: 55, facebook: 32 },
    { name: 'Thu', instagram: 47, facebook: 35 },
    { name: 'Fri', instagram: 62, facebook: 45 },
    { name: 'Sat', instagram: 78, facebook: 58 },
    { name: 'Sun', instagram: 65, facebook: 47 },
  ];
  
  // Handle social post submission
  const onSocialSubmit = (data: SocialPostFormValues) => {
    postMutation.mutate(data);
  };
  
  // Get platform-specific icon
  const getPlatformIcon = (platform: string) => {
    switch (platform) {
      case 'instagram':
        return <Instagram className="h-5 w-5 text-[#C13584]" />;
      case 'facebook':
        return <Facebook className="h-5 w-5 text-[#3b5998]" />;
      case 'twitter':
        return <Twitter className="h-5 w-5 text-[#00acee]" />;
      default:
        return <Share2 className="h-5 w-5" />;
    }
  };
  
  // Show connect account dialog/form
  const connectAccount = (platform: string) => {
    // Simple implementation - in real app would show modal for handle input
    const handle = prompt(`Enter your ${platform} handle:`, `@username`);
    if (handle) {
      connectMutation.mutate({ platform, handle });
    }
  };
  
  return (
    <DashboardLayout>
      <div className="space-y-6">
        <div className="flex flex-col md:flex-row gap-4 md:items-center md:justify-between">
          <h1 className="text-2xl font-bold">Social Media Integration</h1>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
          <StatsCard
            title="Total Followers"
            value={socialStats.followers.toString()}
            icon={<Users className="h-4 w-4 text-accent-blue" />}
            change={23.5}
            progress={70}
            progressColor="bg-accent-blue"
          />
          
          <StatsCard
            title="Engagement Rate"
            value={`${socialStats.engagement}%`}
            icon={<MessageSquare className="h-4 w-4 text-accent-purple" />}
            change={1.8}
            progress={62}
            progressColor="bg-accent-purple"
          />
          
          <StatsCard
            title="Total Posts"
            value={socialStats.posts.toString()}
            icon={<Share2 className="h-4 w-4 text-accent-green" />}
            change={8.4}
            progress={75}
            progressColor="bg-accent-green"
          />
          
          <StatsCard
            title="Link Clicks"
            value={socialStats.clicks.toString()}
            icon={<MousePointer className="h-4 w-4 text-accent-orange" />}
            change={15.2}
            progress={68}
            progressColor="bg-accent-orange"
          />
        </div>
        
        <Tabs defaultValue="accounts" onValueChange={setActiveTab}>
          <TabsList className="grid grid-cols-4 mb-6">
            <TabsTrigger value="accounts" className="flex items-center gap-2">
              <Users className="h-4 w-4" />
              <span>Accounts</span>
            </TabsTrigger>
            <TabsTrigger value="analytics" className="flex items-center gap-2">
              <BarChart className="h-4 w-4" />
              <span>Analytics</span>
            </TabsTrigger>
            <TabsTrigger value="posts" className="flex items-center gap-2">
              <Share2 className="h-4 w-4" />
              <span>Recent Posts</span>
            </TabsTrigger>
            <TabsTrigger value="publish" className="flex items-center gap-2">
              <Calendar className="h-4 w-4" />
              <span>Publish</span>
            </TabsTrigger>
          </TabsList>
          
          {/* Accounts Tab */}
          <TabsContent value="accounts">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {accountsLoading ? (
                <div className="col-span-3 flex justify-center py-12">
                  <div className="animate-spin h-8 w-8 border-4 border-accent-blue border-t-transparent rounded-full"></div>
                </div>
              ) : accounts.length > 0 ? (
                accounts.map((account) => (
                  <Card key={account.id} className="bg-bg-card border-border-color">
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-center">
                        <div className="flex items-center gap-3">
                          {getPlatformIcon(account.platform)}
                          <div>
                            <CardTitle className="text-base capitalize">{account.platform}</CardTitle>
                            <CardDescription className="text-xs">{account.handle}</CardDescription>
                          </div>
                        </div>
                        <Badge 
                          variant={account.connected ? "default" : "outline"}
                          className={account.connected ? "bg-accent-green" : "border-accent-orange text-accent-orange"}
                        >
                          {account.connected ? 'Connected' : 'Not Connected'}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="pb-2">
                      {account.connected ? (
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <p className="text-text-secondary">Followers</p>
                            <p className="font-semibold">{account.followers.toLocaleString()}</p>
                          </div>
                          <div>
                            <p className="text-text-secondary">Engagement</p>
                            <p className="font-semibold">{account.engagement}%</p>
                          </div>
                        </div>
                      ) : (
                        <p className="text-sm text-text-secondary">
                          Connect your {account.platform} account to manage posts and view analytics.
                        </p>
                      )}
                    </CardContent>
                    <CardFooter className="pt-1">
                      {account.connected ? (
                        <Button variant="outline" size="sm" className="w-full">
                          <ExternalLink className="h-4 w-4 mr-2" />
                          View Profile
                        </Button>
                      ) : (
                        <Button 
                          className="w-full bg-accent-blue hover:bg-accent-blue/90" 
                          size="sm" 
                          onClick={() => connectAccount(account.platform)}
                        >
                          <LinkIcon className="h-4 w-4 mr-2" />
                          Connect Account
                        </Button>
                      )}
                    </CardFooter>
                  </Card>
                ))
              ) : (
                <div className="col-span-3 text-center py-12">
                  <p className="text-text-secondary mb-4">No connected social accounts found</p>
                  <Button 
                    className="bg-accent-blue hover:bg-accent-blue/90"
                    onClick={() => setActiveTab('publish')}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Connect an Account
                  </Button>
                </div>
              )}
            </div>
          </TabsContent>
          
          {/* Analytics Tab */}
          <TabsContent value="analytics">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="md:col-span-2">
                <DashboardCard title="Engagement by Day" className="h-full">
                  <div className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={engagementData}>
                        <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" vertical={false} />
                        <XAxis 
                          dataKey="name" 
                          axisLine={{ stroke: 'var(--border-color)' }} 
                          tick={{ fill: 'var(--text-secondary)' }}
                        />
                        <YAxis 
                          axisLine={{ stroke: 'var(--border-color)' }} 
                          tick={{ fill: 'var(--text-secondary)' }}
                        />
                        <Tooltip 
                          contentStyle={{ 
                            backgroundColor: 'var(--bg-card)', 
                            borderColor: 'var(--border-color)',
                            color: 'var(--text-primary)'
                          }}
                          itemStyle={{ color: 'var(--text-primary)' }}
                          labelStyle={{ color: 'var(--text-primary)' }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="instagram" 
                          stroke="#C13584" 
                          strokeWidth={2}
                          dot={{ fill: '#C13584', r: 4 }}
                          activeDot={{ r: 6, fill: '#C13584' }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="facebook" 
                          stroke="#3b5998" 
                          strokeWidth={2}
                          dot={{ fill: '#3b5998', r: 4 }}
                          activeDot={{ r: 6, fill: '#3b5998' }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </DashboardCard>
              </div>
              
              <DashboardCard title="Audience Distribution" className="h-full">
                <div className="h-[300px] flex items-center justify-center">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={socialPerformanceData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {socialPerformanceData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip 
                        contentStyle={{ 
                          backgroundColor: 'var(--bg-card)', 
                          borderColor: 'var(--border-color)',
                          color: 'var(--text-primary)'
                        }}
                        formatter={(value) => [`${value}%`, 'Percentage']}
                      />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </DashboardCard>
            </div>
          </TabsContent>
          
          {/* Posts Tab */}
          <TabsContent value="posts">
            <div className="space-y-6">
              <h3 className="text-lg font-medium">Recent Posts</h3>
              
              {postsLoading ? (
                <div className="flex justify-center py-12">
                  <div className="animate-spin h-8 w-8 border-4 border-accent-blue border-t-transparent rounded-full"></div>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {posts.filter(post => !post.scheduled && post.posted).map((post) => (
                    <Card key={post.id} className="bg-bg-card border-border-color">
                      <CardHeader className="pb-2">
                        <div className="flex items-center gap-2">
                          {getPlatformIcon(post.platform)}
                          <CardTitle className="text-sm capitalize">{post.platform}</CardTitle>
                          <CardDescription className="text-xs ml-auto">
                            {post.posted ? new Date(post.posted).toLocaleDateString() : 'Not posted'}
                          </CardDescription>
                        </div>
                      </CardHeader>
                      {post.image && (
                        <div className="px-6">
                          <img 
                            src={post.image} 
                            alt={`Post on ${post.platform}`}
                            className="w-full h-40 object-cover rounded-md"
                          />
                        </div>
                      )}
                      <CardContent className="py-3">
                        <p className="text-sm">{post.content}</p>
                      </CardContent>
                      <CardFooter className="flex justify-between py-2 border-t border-border-color">
                        <div className="flex items-center gap-4 text-sm">
                          <div className="flex items-center">
                            <MessageSquare className="h-4 w-4 mr-1.5 text-text-secondary" />
                            <span>{post.comments}</span>
                          </div>
                          <div className="flex items-center">
                            <Users className="h-4 w-4 mr-1.5 text-text-secondary" />
                            <span>{post.likes}</span>
                          </div>
                        </div>
                        <Button variant="ghost" size="sm">
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </CardFooter>
                    </Card>
                  ))}
                  
                  {posts.filter(post => !post.scheduled && post.posted).length === 0 && (
                    <div className="col-span-3 text-center py-8">
                      <p className="text-text-secondary">No posts have been published yet</p>
                    </div>
                  )}
                </div>
              )}
              
              <h3 className="text-lg font-medium mt-8">Scheduled Posts</h3>
              
              {postsLoading ? (
                <div className="flex justify-center py-12">
                  <div className="animate-spin h-8 w-8 border-4 border-accent-blue border-t-transparent rounded-full"></div>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {posts.filter(post => post.scheduled).map((post) => (
                    <Card key={post.id} className="bg-bg-card border-border-color">
                      <CardHeader className="pb-2">
                        <div className="flex items-center gap-2">
                          {getPlatformIcon(post.platform)}
                          <CardTitle className="text-sm capitalize">{post.platform}</CardTitle>
                          <Badge variant="outline" className="ml-auto">
                            {post.scheduledAt ? `Scheduled: ${new Date(post.scheduledAt).toLocaleDateString()}` : 'Scheduled'}
                          </Badge>
                        </div>
                      </CardHeader>
                      {post.image && (
                        <div className="px-6">
                          <img 
                            src={post.image} 
                            alt={`Post on ${post.platform}`}
                            className="w-full h-40 object-cover rounded-md"
                          />
                        </div>
                      )}
                      <CardContent className="py-3">
                        <p className="text-sm">{post.content}</p>
                      </CardContent>
                      <CardFooter className="flex justify-end gap-2 py-2 border-t border-border-color">
                        <Button variant="outline" size="sm">
                          Edit
                        </Button>
                        <Button variant="destructive" size="sm">
                          Cancel
                        </Button>
                      </CardFooter>
                    </Card>
                  ))}
                  
                  {posts.filter(post => post.scheduled).length === 0 && (
                    <div className="col-span-2 text-center py-8">
                      <p className="text-text-secondary">No scheduled posts</p>
                    </div>
                  )}
                
                  <Card className="bg-bg-card border-border-color border-dashed flex flex-col items-center justify-center p-6">
                    <Plus className="h-8 w-8 text-text-secondary mb-2" />
                    <p className="text-text-secondary text-sm text-center">
                      Create a new scheduled post
                    </p>
                    <Button 
                      className="mt-4 bg-accent-blue hover:bg-accent-blue/90" 
                      size="sm"
                      onClick={() => setActiveTab('publish')}
                    >
                      Create Post
                    </Button>
                  </Card>
                </div>
              )}
            </div>
          </TabsContent>
          
          {/* Publish Tab */}
          <TabsContent value="publish">
            <DashboardCard title="Create Social Media Post">
              <Form {...socialForm}>
                <form onSubmit={socialForm.handleSubmit(onSocialSubmit)} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                      control={socialForm.control}
                      name="platform"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Platform</FormLabel>
                          <Select 
                            onValueChange={field.onChange} 
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger className="bg-bg-chart border-border-color">
                                <SelectValue placeholder="Select platform" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="instagram">Instagram</SelectItem>
                              <SelectItem value="facebook">Facebook</SelectItem>
                              <SelectItem value="twitter">Twitter</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormDescription>
                            Choose which platform to post to
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={socialForm.control}
                      name="scheduledAt"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Schedule for (Optional)</FormLabel>
                          <FormControl>
                            <Input 
                              type="datetime-local" 
                              className="bg-bg-chart border-border-color"
                              {...field} 
                            />
                          </FormControl>
                          <FormDescription>
                            When to publish this post (leave empty to post now)
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <div className="md:col-span-2">
                      <FormField
                        control={socialForm.control}
                        name="message"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Post Content</FormLabel>
                            <FormControl>
                              <Textarea 
                                rows={5} 
                                className="bg-bg-chart border-border-color" 
                                placeholder="What would you like to share?"
                                {...field} 
                              />
                            </FormControl>
                            <FormDescription>
                              Your post text content
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <div className="md:col-span-2">
                      <FormField
                        control={socialForm.control}
                        name="imageUrl"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Image URL (Optional)</FormLabel>
                            <FormControl>
                              <div className="flex space-x-2">
                                <Input 
                                  className="bg-bg-chart border-border-color flex-grow" 
                                  placeholder="https://example.com/image.jpg"
                                  {...field} 
                                />
                                <Button type="button" variant="outline">
                                  <Image className="h-4 w-4 mr-2" />
                                  Upload
                                </Button>
                              </div>
                            </FormControl>
                            <FormDescription>
                              Add an image to your post
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  <div className="flex justify-end gap-2">
                    <Button type="button" variant="outline">
                      Save as Draft
                    </Button>
                    <Button 
                      type="submit" 
                      className="bg-accent-blue hover:bg-accent-blue/90"
                      disabled={postMutation.isPending}
                    >
                      {postMutation.isPending ? (
                        <>
                          <div className="animate-spin h-4 w-4 mr-2 border-2 border-white border-t-transparent rounded-full"></div>
                          Processing...
                        </>
                      ) : (
                        <>
                          <Share2 className="mr-2 h-4 w-4" />
                          {socialForm.watch('scheduledAt') ? 'Schedule Post' : 'Post Now'}
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              </Form>
            </DashboardCard>
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}